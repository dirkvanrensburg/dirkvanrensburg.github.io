<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Ideas, Solutions, Work in progress]]></title>
  <link href="http://dirk.kirko.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://dirk.kirko.io/"/>
  <updated>2017-02-20T12:19:59+11:00</updated>
  <id>http://dirk.kirko.io/</id>
  <author>
    <name><![CDATA[Dirk van Rensburg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Double and NaN Weirdness]]></title>
    <link href="http://dirk.kirko.io/blog/2017/01/11/java-double-and-nan/"/>
    <updated>2017-01-11T12:08:52+11:00</updated>
    <id>http://dirk.kirko.io/blog/2017/01/11/java-double-and-nan</id>
    <content type="html"><![CDATA[<p>We learn something everyday. We don&rsquo;t always realise it, but we do. Sometimes the thing you learn isn&rsquo;t new at all, but something you sort of knew
but never really thought about too much.</p>

<p>I recently learned that my understanding of what causes a <code>NaN</code> value in Java&rsquo;s <code>double</code> was wrong.</p>

<h2>The story</h2>

<p>I was working on an integration project and received a bug report on one of my services. The report said that my service is returning an HTTP code &lsquo;500&rsquo; for a specific input message.</p>

<p>During my investigation I found the cause of the exception was an unexpected value returned from a down stream service. It was a SOAP service which returned something like the following in its XML response:</p>

<pre><code>&lt;SomeNumberField type="number"&gt;NaN&lt;/SomeNumberField&gt;
</code></pre>

<p>I was a bit surprised to see the <code>NaN</code> there since I would expect them to either leave the field off or set it to <code>null</code> if they don&rsquo;t have a value. This looked like a calculation bug since we all know that, in Java and C# at least, dividing a double with 0 results in a <code>NaN</code>. (<em>Spoiler: It doesn&rsquo;t</em>)</p>

<p>However, this got me thinking and I tried to remember what I know about <code>double</code>and <code>NaN</code>. This resulted in an embarrisingly deep spiral down the rabbit hole.</p>

<h2>NaN</h2>

<p>Well if you think about it <code>NaN</code> is kind of like a number in this case, even though NaN means Not-a-Number. It exists to enable calculations with indeterminate results to be represented as a &ldquo;number&rdquo; in the set of valid <code>double</code> values. Without <code>NaN</code> you could get completely wrong results or you&rsquo;ll get an exception, which isn&rsquo;t ideal either. <code>NaN</code> is defined, same as <code>Infinity</code>, to be part of the set of valid doubles.</p>

<pre><code>System.out.println(Double.isNaN(Double.NaN)); //true
System.out.println(Double.POSITIVE_INFINITY == Double.POSITIVE_INFINITY); //true
System.out.println(Double.NEGATIVE_INFINITY == Double.NEGATIVE_INFINITY); //true
</code></pre>

<p>I played around with <code>double</code> a bit and I thought to share it in a post, because I think the various edge cases of <code>double</code> are interesting.</p>

<p>I started with the following experiment:</p>

<pre><code>//Lets make a NaN!
double NaN = 5.0/0;
System.out.println("NaN: " + NaN);

&gt;&gt; NaN: Infinity
</code></pre>

<p><strong>Wait. What?</strong></p>

<p>Turns out that I have lived with this misconception about what happens when you divide a double by zero. I seriously expected that a <code>double</code> divided by 0 is <code>NaN</code>. Well it turns out I was wrong. You get:</p>

<blockquote><p>POSITIVE_INFINITY</p></blockquote>

<pre><code>double infinity = 5.0/0;
System.out.println((infinity == Double.POSITIVE_INFINITY)); //true
</code></pre>

<p>I can sort of rationalise that the answer could be infinity because you are dividing something largish with something much much smaller. In fact, dividing it by nothing so you could argue the result of that should be infitely large. Although, mathematically this does not make any sense. x/0 is undefined since there is no number that you can multiply with 0 to get back to x again. (for x &lt;> 0)</p>

<p>Anyway lets play with <code>NaN</code> a bit.</p>

<pre><code>double NaN = Double.NaN;
System.out.println("NaN: " + NaN); //NaN: NaN

System.out.println((NaN + 10)); //(NaN + 10): NaN
System.out.println((NaN - 10)); //(NaN - 10): NaN
System.out.println((NaN - NaN)); //NaN - NaN: NaN
System.out.println((NaN / 0));     //NaN / 0: NaN
System.out.println((NaN * 0));     //NaN * 0: NaN
</code></pre>

<p>Well no surprises here. Once a NaN always a NaN.</p>

<blockquote><p>I used <code>Double.NaN</code> above to be sure I have a <code>NaN</code> but if you want to make one yourself then calculating the square root of a negative number is an easy way:</p></blockquote>

<pre><code>System.out.println((Math.sqrt(-1))); //NaN
</code></pre>

<h2>Max and Min value</h2>

<p>Before we get to infinity let take a quick look at <code>Double.MAX_VALUE</code> and <code>Double.MIN_VALUE</code>. These are special constants defined on <code>Double</code> which you can use to check if a number is at the maximum of what a double can represent. If a number is equal to <code>Double.MAX_VALUE</code> it means that it is about to overflow into <code>Double.POSITIVE_INFINITY</code>. The same goes for <code>Double.MIN_VALUE</code> except that it will overflow to <code>Double.NEGATIVE_INFINITY</code>.</p>

<p>Something to note about <code>double</code> is that it can represent ridiculously large numbers using a measly 64 bits. The maximum value is larger than <code>1.7*10^308</code> !</p>

<pre><code>System.out.println("Double.MAX_VALUE is large! : " + (Double.MAX_VALUE == 1.7976931348623157 * Math.pow(10,308)));

&gt; Double.MAX_VALUE is large! : true
</code></pre>

<p>It can represent these large numbers because it encodes numbers as a small real number multiplied by some exponent. See the <a href="https://en.wikipedia.org/wiki/IEEE_754-1985">IEEE spec</a></p>

<p>Let&rsquo;s see what it takes to make <code>Double.MAX_VALUE</code> overflow to infinity.</p>

<pre><code>double max = Double.MAX_VALUE;

System.out.println((max == (max + 1))); //true
System.out.println((max == (max + 1000))); //true
System.out.println("EVEN...");
System.out.println((max == (max + Math.pow(10,291)))); //true

System.out.println("HOWEVER...");
System.out.println((max == (max + Math.pow(10,292)))); //false
System.out.println((max + Math.pow(10,292))); //Infinity
</code></pre>

<p>This ability to represent seriously large numbers comes at a price of accuracy. After a while only changes in the most significant parts of the number can be reflected. As seen in the following code snippet:</p>

<pre><code>double large_num = Math.pow(10,200);
System.out.println("large_num == (large_num + 1000): " + (large_num == (large_num + 1000))); //true
</code></pre>

<p>At large integer values the steps between numbers are very very large since the double has no place to record the change if it doesn&rsquo;t affect its most 16 most significant digits. As shown above 1000 plus a very large number is still that same very large number.</p>

<h2>Infinity</h2>

<p>Java&rsquo;s <code>double</code> supports two kinds of infinity. Positive and negative inifity. The easiest to make those are by dividing by 0.</p>

<pre><code>double pos_infinity = 5.0/0;
System.out.println("POSITIVE_INFINITY == pos_infinity: " + (Double.POSITIVE_INFINITY == pos_infinity));

double neg_infinity = -5.0/0;
System.out.println("NEGATIVE_INFINITY == neg_infinity: " + (Double.NEGATIVE_INFINITY == neg_infinity));
</code></pre>

<p>In maths infinity is a numerical concept representing the idea of an infinitly large number. It is used, for example in calculus, to describe an <a href="http://khanacademy.wikia.com/wiki/Limits_at_infinity_where_x_is_unbounded">unbounded limit</a> - some number that can grow without bound.</p>

<p>In this case things are pretty much the same as in maths, where POSITIVE_INFINITY and NEGATIVE_INFINITY are used to represent numbers that
are infinitely large. However they function more as a way to know something went wrong in your calculation. You are either trying to calculate something that is too large to store in a <code>double</code> or there is some bug in the code.</p>

<p>There are once again some interesting things to note when playing with positive and negative infinity.</p>

<pre><code>double pos = Double.POSITIVE_INFINITY;

System.out.println("POSITIVE_INFINITY + 1000 = " + (pos + 1000));
System.out.println("POSITIVE_INFINITY + 10^1000 = " + (pos + Math.pow(10,1000)));
System.out.println("POSTIVE_INFINITY * 2 = " + (pos * 2));
</code></pre>

<p>Once the value is infinity it stays there even if you add or substract rediculously large numbers. However there is one interesting case, when you substract infinity from infinity:</p>

<pre><code>double pos = Double.POSITIVE_INFINITY;
double neg = Double.NEGATIVE_INFINITY;

System.out.println("POSITIVE_INFINITY - POSITIVE_INFINITY = " + (pos - pos));
System.out.println("POSITIVE_INFINITY + NEGATIVE_INFINITY = " + (pos + neg));
</code></pre>

<p>Subtracting infinity from infinity yields <code>NaN</code> and as you would expect adding or subtracting <code>NaN</code> yields a <code>NaN</code> again.</p>

<pre><code>System.out.println("POSTIVE_INFINITY + NaN" + (pos + Double.NaN));
System.out.println("POSTIVE_INFINITY - NaN" + (pos - Double.NaN));
</code></pre>

<h2>In closing</h2>

<p>Both Java&rsquo;s <code>float</code> and <code>double</code> types follow the <a href="https://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754-1985</a> standard for representing floating point numbers. I am not going to go into great detail on the internals of <code>double</code>, but it suffice to say that <code>double</code> and <code>float</code> are not perfectly accurate when you use them to perform arithmetic. The Java <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">primitive type documentation</a> says:</p>

<blockquote><p>This data type should never be used for precise values, such as currency. For that,
  you will need to use the java.math.BigDecimal class instead.</p></blockquote>

<p>If precision is you main concern then it is generally better to stick with good old <code>java.math.BigDecimal</code>. BigDecimal is immutable which makes it nice to work with, but the most important thing is precision. You have absolute control over number precision, without the rounding or overflow surprises you get with <code>double</code> and <code>float</code>. However, if performance is the main concern it is better to stick with <code>float</code> or <code>double</code> and live with the inaccuracies.</p>

<p>For more information on how Java handles NaN, infinity and rouding read the documentation <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.4">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Split Business Transactions on Oracle Service Bus Using AppDynamics]]></title>
    <link href="http://dirk.kirko.io/blog/2014/06/23/split-business-transactions-on-oracle-osb-using-appdynamics/"/>
    <updated>2014-06-23T00:00:00+10:00</updated>
    <id>http://dirk.kirko.io/blog/2014/06/23/split-business-transactions-on-oracle-osb-using-appdynamics</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p><a href="http://www.ecetera.com.au">We</a> recently helped a customer configure AppDynamics to monitor their business transactions on <a href="http://www.oracle.com/technetwork/middleware/service-bus/overview/index.html">Oracle OSB</a>. AppDynamics does not have built-in support for Oracle OSB, although it does support Weblogic Application Server. It detected various business transactions out of the box, but one type of transaction in particular proved to be a little tricky.</p>

<p>The OSB was accepting SOAP messages from a proprietary upstream system all on one endpoint. It then inspected the message and called one or more services on the OSB, essentially routing the incoming messages. AppDynamics grouped all these messages as one business transaction because they all arrived at the same endpoint. This was not acceptable as a significant number of distinct business transactions were processed this way. We had to find a way to separate the business transaction using the input data.</p>

<p>Changing the application was not an option so, we solved this by augmenting the <em>application server</em> code to give AppDynamics an efficient way to determine the business transaction name. The rest of this article describes how AppDynamics was used to find a solution, and how we improved the solution using custom byte code injection.</p>

<h3>Example Application</h3>

<p>An example OSB application which reproduces the design of the actual application is used to illustrate the problem and solution.</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/example_osb_proxy_service.png" title="Example Application" ></p>

<h3>Finding the business transactions</h3>

<p>It is a bit tricky to find the business transactions for this application because the services on Oracle OSB are all implemented by configuring the same Oracle classes. Each Proxy Service is just another instance of the same class and the call graph in the transaction snapshot is full of generic sounding names like <em>&lsquo;AssignRuntimeStep&rsquo;</em></p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/callgraph.png" title="Proxy Service call graph" ></p>

<p>The first step to figuring out how to separate the business transactions is using the AppDynamics <a href="http://docs.appdynamics.com/display/PRO14S/Configure+Data+Collectors">Method Invocation Data Collector</a> feature. This gives you a way to inspect the method parameters in the call and printing their values. Method invocation data collectors allows you to configure AppDynamics to capture the value of a parameter for a particular method invocation. Not only the value of the parameter but it is possible to apply a chain of get- methods to the parameter.</p>

<p>The following figure shows data collector configuration to get information out of the parameters passed to the <em>processMessage</em> method on the <em>AssignRuntimeStep</em> class we noticed in the call graph. This data collector tells AppDynamics to capture the first parameter to the <em>processMessage</em> method on the class <em>AssignRuntimeStep</em> and then to collect the result of calling <em>toString()</em> and <em>getClass().getName()</em> on that parameter.</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/method_invocation_data_collector.png" title="Method Invocation Data Collector" ></p>

<p>The results of this can be seen in the following images. The first shows the result of the <em>toString()</em> applied to the first parameter</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/user_data1.png"></p>

<p>and the second shows the class of the parameter. Notice that the class name is repeated three times. It is a list of values, one value saved for every invocation of the <em>processMessage</em> method.</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/user_data2.png"></p>

<p>From the first image it is obvious that the input message is contained in the first parameter. You can also see that the messages is stored in a map like structure and the key is called <em>body</em>. Note that the business transaction name is visible in the first image <strong>TranactionName=&ldquo;Business Transaction1&rdquo;</strong>. The second image shows the type of the first parameter so the message is contained in an object of class <em>MessageContextImpl</em>.</p>

<p>The next step is to tell AppDynamics what to use for splitting the business transactions and this can be done by using a <a href="http://docs.appdynamics.com/display/PRO14S/Match+Rule+Conditions">Business Transaction Match Rule</a>. The number of characters from the start of the message to the field we are interested in are roughly <strong>126</strong> and assuming the transaction names will be around 20 characters we can set up a match rule as follows:</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/new_bt_match_rule_1.png" title="New Business Transaction Match Rule" >
<img class="center" src="/images/split_bt_on_OSB_AppD/new_bt_match_rule_split_1.png" title="New Business Transaction Match Rule - Split" ></p>

<p>Note the number of arguments (2) set in the above image. That value is important and the transactions will not show up at all if the wrong value is used. We determined the value by decompiling the Weblogic class but you can always do it by first trying 1 and then 2.</p>

<p>With the above configuration in place the AppDynamics agent is able to pick up the different transactions. The transaction names aren&rsquo;t perfect but it works!</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/discovered_business_transactions.png" title="Discovered business transactions" ></p>

<h3>Optimise and get the correct name</h3>

<p>This solution is OK, but it has a few issues. Firstly the transaction names are either cut off or include characters that are not part of the transaction name. It is also not very efficient, because it requires the entire <em>MessageContextImpl</em> instance to be serialised as a String just to extract a small part of it. To improve this we need to add custom code to the <em>MessageContextImpl</em> class so that we can access the data in a more efficient way.</p>

<p>Consider the following Java code to search a string for the transaction name:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SEARCH_TOKEN</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">TransactionName</span><span class="o">=</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTransactionType</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">startIndex</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">SEARCH_TOKEN</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">endIndex</span> <span class="o">=</span> <span class="n">startIndex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">startIndex</span> <span class="o">+=</span> <span class="n">SEARCH_TOKEN</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>            <span class="c1">//Jump to the open quote</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">endIndex</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;\&quot;&quot;</span><span class="o">,</span> <span class="n">startIndex</span><span class="o">);</span>     <span class="c1">//Find the end quote</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">startIndex</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">endIndex</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">endIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is a statically accessible piece of code that will extract the transaction name from an arbitrary string. It first tries to find the token in the input string. Once the token is found it determines the open and end quote positions and returns the transaction name. If nothing is found then return <em>null</em>.</p>

<p>The next step is to write some Java code that can use the above code without loading the entire string into memory.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">short</span> <span class="n">WITHIN</span> <span class="o">=</span> <span class="mi">512</span><span class="o">;</span>    <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">short</span> <span class="n">BUFFER_SIZE</span> <span class="o">=</span> <span class="mi">256</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTransactionType</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">inputStream</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">),</span> <span class="n">BUFFER_SIZE</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">read</span><span class="o">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Read up to BUFFER_SIZE and then stop</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">stop</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">char</span><span class="o">[]</span> <span class="n">cbuf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">read</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">cbuf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">BUFFER_SIZE</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">read</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">cbuf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//Search for the transaction type in the buffer</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="n">getTransactionType</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">read</span><span class="o">;</span>
</span><span class='line'>                <span class="n">stop</span> <span class="o">=</span> <span class="n">stop</span> <span class="o">||</span> <span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">total</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">WITHIN</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">stop</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">(</span><span class="n">read</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>        <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">&quot;Failed: {0}&quot;</span><span class="o">,</span><span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//Omitted clean up code</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//Something went wrong</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This method accepts an <em>InputStream</em> and progressively reads it, 256 characters at a time, to find the transaction type. It is limited to search only the first 512 characters as an optimisation based on the known message structure. It will likely always find the transaction type within the first 256 characters, but 512 makes it a certainty. Also note the variables <em>WITHIN</em> and <em>BUFFER_SIZE</em>, which are there to make the code configurable and future proof.</p>

<p>The code listed above can be included in a custom Java agent that will instrument the Weblogic code using a <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">ClassFileTransformer</a>. Creating Java agents and class transformers are out of the scope of this article. It focuses on the bits actually injected. For more on creating a custom Java agent see the <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> documentation.</p>

<p>The next step is making the above <em>getTransactionType</em> accessible by the AppDynamics agent.</p>

<h3>Using custom byte code injection to expose internals to AppDynamics</h3>

<p>Byte code injection can be achieved in different ways, one way is using the <a href="http://asm.ow2.org/">ASM library</a>. The basic idea is to inject a method into the <em>MessageContextImpl</em> class that can be accessed by AppDynamics as a getter on the first parameter of the <em>processMessage</em> method of <em>AssignRuntimeStep</em>.</p>

<p>So for the agent to inject the following piece of code into the <em>MessageContextImpl</em> class,</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">String</span> <span class="n">ec_getTransType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;getTransactionType called&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TransactionTypeExtractor</span><span class="o">.</span><span class="na">getTransactionType</span><span class="o">(</span><span class="n">getBody</span><span class="o">().</span><span class="na">getInputStream</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Failed to get transactionType&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Something went wrong</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>you can use ASM as listed below. It effectively writes the above method into the <em>MessageContextImpl</em> class before it is loaded by the class loader. For more information on how to use ASM see the <a href="http://download.forge.objectweb.org/asm/asm4-guide.pdf">ASM User Guide</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MethodVisitor</span> <span class="n">mv</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitMethod</span><span class="o">(</span><span class="n">ACC_PUBLIC</span><span class="o">,</span> <span class="s">&quot;ec_getTransType&quot;</span><span class="o">,</span> <span class="s">&quot;()Ljava/lang/String;&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitCode</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitTryCatchBlock</span><span class="o">(</span><span class="n">l0</span><span class="o">,</span> <span class="n">l1</span><span class="o">,</span> <span class="n">l2</span><span class="o">,</span> <span class="s">&quot;java/lang/Exception&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitFieldInsn</span><span class="o">(</span><span class="n">GETSTATIC</span><span class="o">,</span> <span class="s">&quot;au/com/ecetera/javaagent/logging/Logger&quot;</span><span class="o">,</span> <span class="s">&quot;INSTANCE&quot;</span><span class="o">,</span> <span class="s">&quot;Lau/com/ecetera/javaagent/logging/Logger;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLdcInsn</span><span class="o">(</span><span class="s">&quot;getTransactionType called&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ICONST_0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitTypeInsn</span><span class="o">(</span><span class="n">ANEWARRAY</span><span class="o">,</span> <span class="s">&quot;java/lang/Object&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKEVIRTUAL</span><span class="o">,</span> <span class="s">&quot;au/com/ecetera/javaagent/logging/Logger&quot;</span><span class="o">,</span> <span class="s">&quot;debug&quot;</span><span class="o">,</span> <span class="s">&quot;(Ljava/lang/String;[Ljava/lang/Object;)V&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l3</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ALOAD</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKEVIRTUAL</span><span class="o">,</span> <span class="s">&quot;com/bea/wli/sb/context/MessageContextImpl&quot;</span><span class="o">,</span> <span class="s">&quot;getBody&quot;</span><span class="o">,</span> <span class="s">&quot;()Lcom/bea/wli/sb/sources/Source;&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ACONST_NULL</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKEINTERFACE</span><span class="o">,</span> <span class="s">&quot;com/bea/wli/sb/sources/Source&quot;</span><span class="o">,</span> <span class="s">&quot;getInputStream&quot;</span><span class="o">,</span> <span class="s">&quot;(Lcom/bea/wli/sb/sources/TransformOptions;)Ljava/io/InputStream;&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKESTATIC</span><span class="o">,</span> <span class="s">&quot;au/com/ecetera/javaagent/vha/TransactionTypeExtractor&quot;</span><span class="o">,</span> <span class="s">&quot;getTransactionType&quot;</span><span class="o">,</span> <span class="s">&quot;(Ljava/io/InputStream;)Ljava/lang/String;&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ARETURN</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitFrame</span><span class="o">(</span><span class="n">Opcodes</span><span class="o">.</span><span class="na">F_SAME1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;java/lang/Exception&quot;</span><span class="o">});</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ASTORE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l4</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitFieldInsn</span><span class="o">(</span><span class="n">GETSTATIC</span><span class="o">,</span> <span class="s">&quot;au/com/ecetera/javaagent/logging/Logger&quot;</span><span class="o">,</span> <span class="s">&quot;INSTANCE&quot;</span><span class="o">,</span> <span class="s">&quot;Lau/com/ecetera/javaagent/logging/Logger;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLdcInsn</span><span class="o">(</span><span class="s">&quot;Failed to get transactionType&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ALOAD</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ICONST_0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitTypeInsn</span><span class="o">(</span><span class="n">ANEWARRAY</span><span class="o">,</span> <span class="s">&quot;java/lang/Object&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKEVIRTUAL</span><span class="o">,</span> <span class="s">&quot;au/com/ecetera/javaagent/logging/Logger&quot;</span><span class="o">,</span> <span class="s">&quot;error&quot;</span><span class="o">,</span> <span class="s">&quot;(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/Object;)V&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l5</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ACONST_NULL</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">ARETURN</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Label</span> <span class="n">l6</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Label</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLabel</span><span class="o">(</span><span class="n">l6</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLocalVariable</span><span class="o">(</span><span class="s">&quot;this&quot;</span><span class="o">,</span> <span class="s">&quot;Lcom/bea/wli/sb/context/MessageContextImpl;&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">l0</span><span class="o">,</span> <span class="n">l6</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitLocalVariable</span><span class="o">(</span><span class="s">&quot;e&quot;</span><span class="o">,</span> <span class="s">&quot;Ljava/lang/Exception;&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">l4</span><span class="o">,</span> <span class="n">l5</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitMaxs</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mv</span><span class="o">.</span><span class="na">visitEnd</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Change AppDynamics configuration</h3>

<p>Now the AppDynamics agent configuration can be updated to use the new <em>ec_getTransType</em> method.</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/new_bt_match_rule_split_2.png" title="&ldquo;Using new method to split&rdquo;" ></p>

<p>The resulting business transaction names now looks much better.</p>

<p><img class="center" src="/images/split_bt_on_OSB_AppD/discovered_business_transactions_2.png" title="&ldquo;Properly named transactions&rdquo;" ></p>

<h3>Conclusion</h3>

<p>With AppDynamics it is possible to get really useful information out of a running application. It has very flexible configuration, which allows you to really dive deep into the application internals to find issues and separate transactions. However, sometimes it is better to give AppDynamics a hook into the internal information so that it can work more efficiently. When you have access to the application code then this can easily be achieved by adding some code. When it is not practical to rebuild the entire application then you can always use byte code injection.</p>

<p><a href="#references"></a></p>
]]></content>
  </entry>
  
</feed>
